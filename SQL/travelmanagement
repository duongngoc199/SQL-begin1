USE TravelManagement;

CREATE TABLE Travel(
  ID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
  COUNTRY VARCHAR(200) NOT NULL,
  PRICE FLOAT DEFAULT 0.0 CHECK(PRICE >0) NOT NULL,
  NUMBEROFDAYS INT NOT NULL,
  STARTDATE DATE NOT NULL,
  CATEGORIESID INT NOT NULL 
);

SELECT * FROM Travel;

ALTER TABLE TRAVEL ADD CONSTRAINT FK_CATEGORIESID
FOREIGN KEY (CATEGORIESID) REFERENCES CATEGORIES(ID);

ALTER TABLE TRAVEL ADD CONSTRAINT CK_NUMBEROFDAYS 
CHECK (NUMBEROFDAYS >= 1 AND NUMBEROFDAYS <=20);

CREATE TABLE CATEGORIES(
  ID INT NOT NULL PRIMARY KEY IDENTITY(1,2),
  NAME VARCHAR(250) NOT NULL,
  NUMBEROFTRAVELS INT CHECK(NUMBEROFTRAVELS >= 0) DEFAULT 0
);

ALTER TABLE CATEGORIES ADD CONSTRAINT UQ_NAME
UNIQUE(NAME);

INSERT INTO CATEGORIES (NAME)
 VALUES ('BEACHES');
INSERT INTO CATEGORIES (NAME)
 VALUES ('FAMILY TRAVEL');
INSERT INTO CATEGORIES (NAME)
 VALUES ('FOOD AND DRINK');
INSERT INTO CATEGORIES (NAME)
 VALUES ('CLIMBING');

INSERT INTO TRAVEL(COUNTRY,PRICE,NUMBEROFDAYS,STARTDATE,CATEGORIESID)
 VALUES ('SWEDEN','12000.0','10','2021-05-05',5);
INSERT INTO TRAVEL(COUNTRY,PRICE,NUMBEROFDAYS,STARTDATE,CATEGORIESID)
 VALUES ('KOREA','10000.0','6','2021-05-10',7);
INSERT INTO TRAVEL(COUNTRY,PRICE,NUMBEROFDAYS,STARTDATE,CATEGORIESID)
 VALUES ('CHINA','15000.0','10','2021-05-06',1);
INSERT INTO TRAVEL(COUNTRY,PRICE,NUMBEROFDAYS,STARTDATE,CATEGORIESID)
 VALUES ('SWEDEN','15000.0','15','2021-10-05',3);
INSERT INTO TRAVEL(COUNTRY,PRICE,NUMBEROFDAYS,STARTDATE,CATEGORIESID)
 VALUES ('CHINA','8000.0','5','2021-04-22',7);
INSERT INTO TRAVEL(COUNTRY,PRICE,NUMBEROFDAYS,STARTDATE,CATEGORIESID)
 VALUES ('KOREA','14000.0','10','2021-05-19',5);
INSERT INTO TRAVEL(COUNTRY,PRICE,NUMBEROFDAYS,STARTDATE,CATEGORIESID)
 VALUES ('CHINA','10000.0','8','2021-05-05',1);
INSERT INTO TRAVEL(COUNTRY,PRICE,NUMBEROFDAYS,STARTDATE,CATEGORIESID)
 VALUES ('JAPAN','20000.0','10','2021-08-18',3);

SELECT COUNT(*) FROM Travel;

--INNER JOIN

SELECT CA.NAME,TR.COUNTRY,TR.NUMBEROFDAYS, TR.PRICE,TR.STARTDATE
FROM TRAVEL AS TR
INNER JOIN CATEGORIES AS CA ON TR.CATEGORIESID = CA.ID
ORDER BY NAME;

SELECT * FROM (SELECT CA.NAME AS CATEGORIESNAME,TR.COUNTRY AS COUNTRYTRAVEL,TR.NUMBEROFDAYS, TR.PRICE,TR.STARTDATE
FROM TRAVEL AS TR
INNER JOIN CATEGORIES AS CA ON TR.CATEGORIESID = CA.ID) AS VIEWTRAVELCATEGORIES

SELECT 
  COUNT(VIEWTRAVELCATEGORIES.TRAVELID),VIEWTRAVELCATEGORIES.COUNTRY
  FROM(SELECT CA.NAME,TR.COUNTRY,TR.NUMBEROFDAYS, TR.PRICE,TR.STARTDATE,TR.ID AS TRAVELID
  FROM TRAVEL AS TR
  INNER JOIN CATEGORIES AS CA ON TR.CATEGORIESID = CA.ID) AS VIEWTRAVELCATEGORIES
GROUP BY VIEWTRAVELCATEGORIES.COUNTRY;


SELECT 
  COUNT(VIEWTRAVELCATEGORIES.TRAVELID),VIEWTRAVELCATEGORIES.NAME
  FROM
  (SELECT CA.NAME,TR.COUNTRY,TR.NUMBEROFDAYS, TR.PRICE,TR.STARTDATE,TR.ID AS TRAVELID
  FROM TRAVEL AS TR
  INNER JOIN CATEGORIES AS CA ON TR.CATEGORIESID = CA.ID) AS VIEWTRAVELCATEGORIES
GROUP BY VIEWTRAVELCATEGORIES.NAME;


SELECT 
  CATEGORIES.ID AS CATEGOIESID,
  CATEGORIES.NAME AS CATEGORIESNAME,
  NUMBERTRAVELBYCATEGORIES.NUMBEROFTRAVELS
FROM(
  SELECT COUNT(ID) AS NUMBEROFTRAVELS, CATEGORIESID
  FROM TRAVEL GROUP BY CATEGORIESID) 
      AS NUMBERTRAVELBYCATEGORIES
INNER JOIN CATEGORIES 
  ON NUMBERTRAVELBYCATEGORIES.CATEGORIESID = CATEGORIES.ID


UPDATE CATEGORIES SET CATEGORIES.NUMBEROFTRAVELS = CATEGORIESNUMBEROFTRAVELS.NUMBEROFTRAVELS
 from CATEGORIES
 inner join CATEGORIESNUMBEROFTRAVELS on CATEGORIES.ID = CATEGORIESNUMBEROFTRAVELS.CATEGOIESID
 ;

 SELECT * FROM CATEGORIES;

 SELECT * FROM Travel;

 -- tăng giá 10% nếu numberofdays > 8

 UPDATE Travel SET PRICE = 1.1*TRAVEL.PRICE
 WHERE NUMBEROFDAYS > 8;

 -- tăng giá 15% nếu numberofdays > 10 and name = food and drinks

 UPDATE Travel SET PRICE = 1.5*Travel.PRICE
 WHERE NUMBEROFDAYS > 10 AND CATEGORIESID = 3;

--IF PRICE < 0, DO NOT ALLOW UPDATE. -> USE TRIGGER

 CREATE TRIGGER TRG_TRAVELPRICE ON Travel
 AFTER UPDATE AS
 BEGIN
       DECLARE @newprice AS NUMERIC(14,2);
	   SELECt @newprice = inserted.price from inserted;
	   IF @newprice < 0
	BEGIN
	  RAISERROR ('cannot update price <0',16,1);
	  ROLLBACK TRANSACTION;
	END
 END

 --try another example of trigger
 -- after insert data to Travel, startdate must >= 'current date'

 CREATE TRIGGER TRGINSERTSTARTDATE ON TRAVEL
 AFTER INSERT AS
 BEGIN
    DECLARE @newstartdate date;
	select @newstartdate = inserted.startdate from inserted;
	if @newstartdate < GETDATE()

	BEGIN
	  RAISERROR('startdate must be >= current date',16,1);
	  ROLLBACK TRANSACTION;
	END
 END
